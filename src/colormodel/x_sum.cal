/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
 /*  Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk>
  *  Author: Rob Stewart <r.stewart@hw.ac.uk>
  *  Date:   10.08.2014
  */
  
package colormodel;
import std.header.Parameter.*;

actor x_sum() float curPixelWeight, bool reset, uint X ==> float xSum:
	
	float x_sum_value := 0;
	bool reset_signal;
	int x;
	int half_x := HALF_X;
	
	calXsum: action curPixelWeight:[cur_wght_val], reset:[reset_val], X:[x_val] ==> 	
	do	
		x := x_val;
		
		x_sum_value := x_sum_value + (x-half_x)*cur_wght_val;		
		reset_signal := reset_val;								
	end		
	
	
	checkResetSig: action ==>
	guard reset_signal = true
	do
		reset_signal := false;
	end
		
	send: action ==> xSum:[sum]			
	var float sum
	do
		sum := x_sum_value;
		x_sum_value := 0;
	end
	
	schedule fsm s0 :	
   		s0 (calXsum ) --> s0;
   		s0 (checkResetSig) --> s1;
   		s1 (send) --> s0; 					
	end
	
	priority		
		checkResetSig > calXsum;		
	end				
	
end