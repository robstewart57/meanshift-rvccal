/*
 * Copyright (c) 2013, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package std.stdio;
@xronos_no_generation
actor EndOfStream(int nbFramesToEncode)
	uint(size=8) In
		==>
			uint(size=8) Out,
			bool pEOF:

	int frames := 1;
	
	
	startMarker: action In:[token] ==> Out:[token],pEOF:[false]
	guard
		token = 0xFF
	end
	
	notStartMarker: action In:[token] ==> Out:[token],pEOF:[false]
	guard
		token != 0xFF
	end	
	
	
	noEof: action In:[token] ==> Out:[token], pEOF:[false]
	guard
		 token != 0xD9
	end
	
	
	eofFinal: action In:[token] ==> Out:[token], pEOF:[false]
	guard
		token = 0xD9 and frames = nbFramesToEncode
	end
	
	
	eofNextImage: action In:[token] ==> Out:[token], pEOF:[false]
	guard
		token = 0xD9 and frames != nbFramesToEncode
	do
		frames := frames + 1;
	end
	
	eofTrue:action ==> pEOF:[true]
	end
	
	schedule fsm s0:
		s0	(startMarker)		--> s1;
		s0	(notStartMarker)	--> s0;
		
		s1	(noEof)				--> s0;
		s1	(eofNextImage)		--> s0;
		s1	(eofFinal)			--> s2;
		
		s2	(eofTrue)			--> s0;
	end
				
end