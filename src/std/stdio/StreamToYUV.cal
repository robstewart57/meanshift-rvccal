/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
 /*  Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk>
  *  Author: Rob Stewart <r.stewart@hw.ac.uk>
  *  Date:   10.08.2014
  */

package std.stdio;
import std.header.Parameter.*;

actor StreamToYUV() uint(size=8) stream ==> int(size=8) Y, int(size=8) U, int(size=8) V: 
	
	uint(size=32) count := 0;	
	
	getPixValueY: action stream:[Bytes] ==> Y:[Bytes] 	
	do		
		count := count + 1;						
	end
					
	getPixValueU: action stream:[Bytes]==> U:[Bytes]	
	do		
		count := count + 1;					
	end
	
	getPixValueV: action stream :[Bytes]==> V:[Bytes]
	do		
		count := count + 1;					
	end	

	doneCount: action ==> 
	guard count = IM_WIDTH * IM_HEIGHT
	do
		count := 0;								
	end		
		
	
	schedule fsm s0 :			
		s0 (getPixValueY ) --> s0;
		s0 (doneCount ) --> s1;
		s1 (getPixValueU ) --> s1;
		s1 (doneCount ) --> s2;
		s2 (getPixValueV ) --> s2;
		s2 (doneCount ) --> s0;		
	end
	
	priority
		doneCount > getPixValueY;
		doneCount > getPixValueU;
		doneCount > getPixValueV;		
	end
	
end

